2  СОДЕРЖАНИЕ ВВЕДЕНИЕ .................................................................................................................................... 3 1 Описание NTRU ......................................................................................................................... 4 2 Определения ................................................................................................................................ 5 3 Параметризация .......................................................................................................................... 7 4 DPKE и KEM ............................................................................................................................... 8 6 Процесс шифрования и дешифрования .................................................................................. 10 6.1 Построение ключей ............................................................................................................... 10 6.2 Шифрование ........................................................................................................................... 11 6.3 Дешифрование ....................................................................................................................... 11 6.4 Инкапсуляция ключей ........................................................................................................... 12 7 Рекомендуемые параметры ...................................................................................................... 14 8 Ожидаемый уровень безопасности ......................................................................................... 16 9 Преимущества и недостатки .................................................................................................... 17 ЗАКЛЮЧЕНИЕ............................................................................................................................ 18 СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ .................................................................. 19     3  ВВЕДЕНИЕ   4  1 Описание NTRU        5  2 Определения  Решётки – это дискретные подгруппы вещественного векторного пространства n, линейные оболочки которых совпадают с ним: 1|niiiiLbλλ==∈∑. Линейная оболочка ()VX подмножества X линейного пространства V — пересечение всех подпространств V, содержащих X. Линейная оболочка является подпространством V. Факторкольцо — общеалгебраическая конструкция, позволяющая распространить на случай колец конструкцию факторгруппы.  Факторгруппа — множество смежных классов группы по её нормальной подгруппе, само являющееся группой с определённой специальным образом групповой операцией. KEM – key encapsulation mechanism – механизм инкапсуляции ключей. DPKE – deterministic public key encryption scheme – детерминированная схема шифрования с открытым ключом. ()/n× это мультипликативная группа целых чисел по модулю n. 1Φ – многочлен вида ()1x−. nΦ – это многочлен ()()1211...1nnnxxxx−−−−=+++. R – это факторкольцо []()1/nxΦΦ. S – факторкольцо вида []()/nxΦ. /3R – это факторкольцо []()1/3,nxΦΦ. /Rq – это факторкольцо []()1/,nxqΦΦ. Каноничный /Rq-представитель из []ax∈ – это уникальный многочлен []bx∈ степени не больше 1n− с коэффициентами из множества {}/2,/21,...,/21qqq−−+− такой, что ()()1mod,nabq≡ΦΦ. /2S – это факторкольцо []()/2,nxΦ. Каноничный /2S-представитель из 6  []ax∈ – это уникальный многочлен []bx∈ степени не больше 2n− с коэффициентами из множества {}0,1 такой, что ()()mod2,nab≡Φ. /3S – это факторкольцо []()/3,nxΦ. Каноничный /3S-представитель из []ax∈ – это уникальный многочлен []bx∈ степени не больше 2n− с коэффициентами из множества {}1,0,1− такой, что ()()mod3,nab≡Φ. /Sq – это факторкольцо []()/,nxqΦ. Каноничный /Sq-представитель из []ax∈ – это уникальный многочлен []bx∈ степени не более 2n− с коэффициентами из множества {}/2,/21,...,/21qqq−−+− такой, что ()()mod,nabq≡Φ. Многочлен является тернарным (троичным), если его коэффициенты принадлежат множеству {}1,0,1−. Тернарный многочлен viiivx=∑ обладает свойством неотрицательной корреляции, если 10iiivv+≥∑. T – это множество ненулевых тернарных многочленов степени не больше 2n−. Другими словами, T - это множество каноничных /3S-представителей. T+ – это подмножество множества T, состоящее из многочленов со свойством неотрицательной корреляции. ()Td для четного положительного числа d является подмножеством множества T, состоящим из многочленов, которые имеют ровно /2d коэффициентов, равных 1+, и /2d коэффициентов, равных 1−.     7  3 Параметризация Для NTRU определен следующий набор параметров: (),,,,,,,LiftfgrmnpqLLLL, где ,,npq – взаимно простые положительные целые числа; ,,,fgrmLLLL – множества целочисленных многочленов; Lift – инъекция []mLx→, для которой ()3Lift()Smm= для всех mmL∈. Набор параметров корректен, если ()1fLift()mod()nprgm⋅⋅+⋅ΦΦ имеет коэффициенты в множестве {}/2,/21,...,/21qqq−−+− для всех ()()f, g, r, m,,,fgrmLLLL∈. Числом n характеризуется размер выбираемых в качестве ключей многочленов. Числа p и q не обязательно должны быть простыми, но НОД(,)pq должен равняться 1. Следует отметить, что параметр p служит для определения интервала, которому обязаны принадлежать все коэффициенты многочленов, используемых в криптосистеме. А если точнее, пространство сообщений L криптосистемы NTRU определяется как: ()11|для всех коэффициентов  лежащих в ;22mppLMxM−−=∈−.   8  4 DPKE и KEM DPKE (детерминированная схема шифрования с открытым ключом) параметризуется взаимно простыми положительными целыми числами ,,npq, выборочными пространствами ,,,fgrmLLLL и инъекцией Lift: []mLx→. Разработчики рекомендуют два узко определенных семейства наборов параметров, которые называют ntru-hps и ntru-hrss.  Наборы параметров ntru-hps следуют примеру Хоффстейна, Пифера и Сильвермана, использующему выборочные пространства с фиксированным весом, и допускают несколько вариантов выбора q для каждого n [2].  Наборы параметров ntru-hrss следуют примеру Хюльсинга, Рейнвельда, Шанка и Швайба, использующим произвольные весовые выборочные пространства и фиксированный q как функцию n [1].  Рисунок 1 – DPKE из реализации NTRU  KEM (механизм инкапсуляции ключей), который создали разработчики, имеет строгое доказательство безопасности IND-CCA2 в модели случайного оракула (ROM) в предположении, что их же DPKE является безопасным OW-CPA. Он также имеет строгое доказательство безопасности IND-CCA2 в квантовой доступной модели случайного оракула (QROM) при нестандартном предположении, сформулированном Сайто, Ксагавой и Ямакавой [4]. KEM отклоняет недействительные зашифрованные тексты, возвращая псевдослучайный ключ вместо символа ошибки — метод, называемый неявным отклонением. 9   Рисунок 2 – KEM из реализации NTRU  Набором параметров для nru-hps являются: Lift()mm= и  , (/82), , (/82)fgrmLTLTqLTLTq==−==−. Выбор gL гарантирует, что 10 (mod(,))hq≡Φ, и наряду с выбором mL это гарантирует, что 10 (mod(,))cq≡Φ. Весовой параметр /82q− является самым большим, который совместим с идеальной корректностью. Набором параметров для nru-hrss являются: 11Lift()3(/)mSm=Φ⋅Φ и  1, {:}, , fgrmLTLvvTLTLT++==Φ⋅∈==. Выбор gL гарантирует, что 10 (mod(,))hq≡Φ, и наряду с выбором Lift это гарантирует, что 10 (mod(,))cq≡Φ.     10  6 Процесс шифрования и дешифрования  6.1 Построение ключей Генерация пары ключей DPKE_Key_Pair: На вход подаются из битовой строки битовые блоки (coins) длины sample_key_bits. На выходе получаем байтовый массив – packed_private_key длины dpke_private_key_bytes, а также байтовый массив – packed_public_key длины dpke_public_key_bytes.  Процедура: 1. (f,g)Sample_fg()coins=; 2. f3_inverse(f)pS=; 3. (h,h)DPKE_Public_Key(f,g)q=; 4. __pack_S3(f) || pack_S3(f)|| pack_Sq(h)pqpackedprivatekey=; 5. __pack_Rq0(h)packedpublickey=; 6. выход – (__,__packedprivatekeypackedpublickey).  Генерация открытого ключа DPKE_Public_Key: На вход подаются многочлены ffL∈ и ggL∈. На выходе получаем многочлен h, который удовлетворяет равенству Rq(hf)3g⋅=⋅, и многочлен hq, который удовлетворяет равенству Sq(hh)1q⋅=. Процедура: 1. G3g=⋅; 2. 0Sq(Gf)v=⋅; 3. 10Sq_inverse()vv=; 4. 1hRq(GG)v=⋅⋅; 5. 1hRq(ff)qv=⋅⋅; 6. выход – (h,hq).  11  6.2 Шифрование Процедура шифрования DPKE_Encrypt: На вход подается байтовый массив packed_public_key длины dpke_public_key_bytes и байтовый массив packed_rm длины dpke_plaintext_bytes. На выходе имеем байтовый массив packed_ciphertext длины dpke_ciphertext_bytes. Процедура: 1. Разделить packed_rm на _ || _packedrpackedm: packed_r длины packed_s3_bytes и packed_m длины packed_s3_bytes; 2. rS3(unpack_S3(_))packedr=; 3. 0munpack_S3(_)packedm=; 4. 10mLift(m)=; 5. hunpack_Rq0(__)packedpublickey=; 6. 1cRq(rhm)=⋅+; 7. _pack_Rq0(c)packedciphertext=; 8. выход – packed_ciphertext.  6.3 Дешифрование Процедура дешифрования DPKE_Decrypt: На вход подается байтовый массив packed_private_key длины dpke_private_key_bytes и packed_ciphertext длины dpke_ciphertext_bytes. На выходе получаем байтовый массив packed_rm длины dpke_plaintext_bytes и бит fail. Процедура: 1. Разделить packed_private_key на _||_||_packedfpackedfppackedhq: packed_f длины packed_s3_bytes, packed_fp длины packed_s3_bytes и packed_hq длины packed_s3_bytes; 2. cunpack_Rq0(_)packedciphertext=; 12  3. fS3(unpack_S3(_))packedf=; 4. funpack_S3(_)ppackedfp=; 5. hunpack_Rq0(_)qpackedhq=; 6. 1Rq(cf)v=⋅; 7. 01mS3(f)pv=⋅; 8. 10mLift(m)=; 9. 1rSq((cm)h)q=−⋅; 10. 0_pack_S3(r)||pack_S3(m)packedrm=; 11. если rmL∈ и 0mmL∈, то 0fail=; 12. иначе 1fail=; 13. выход – (_,packedrmfail).  6.4 Инкапсуляция ключей Генерация пары ключей Key_Pair: На вход подается битовая строка seed длины key_seed_bits. На выходе имеем байтовый массив packed_private_key длины kem_private_key_bytes и packed_public_key длины kem_public_key_bytes. Процедура: 1. Разделить seed на _||_fgbitsprfkey: _fgbits длины sample_key_bits и _prfkeyдлины prf_key_bits; 2. (___,__)DPKE_Key_Pair(_)packeddpkeprivatekeypackedpublickeyfgbits=; 3. _____||bits_to_bytes(_)packedprivatekeypackeddpkeprivatekeyprfkey=; 4. (__,__)packedprivatekeypackedpublickey.  Процедура инкапсуляции Encapsulate: На вход подается байтовый массив packed_public_key длины kem_public_key_bytes. На выходе получаем битовую строку shared_key длины 13  kem_shared_key_bits и байтовый массив packed_ciphertext длины kem_ciphertext_bytes. Процедура: 1. Пусть coins будут строкой однородных случайных битов из sample_plaintext_bits; 2. (r,m)Sample_rm()coins=; 3. _pack_S3(r)||pack_S3(m)packedrm=; 4. _Hash(bytes_to_bits(_,8dpke_plaintext_bytes))sharedkeypackedrm=⋅; 5. _DPKE_Encrypt(__,_)packedciphertextpackedpublickeypackedrm=.  Процедура декапсуляции Decapsulate: На вход подается байтовый массив packed_private_key длины kem_private_key_bytes и байтовый массив packed_ciphertext длины kem_ciphertext_bytes. На выходе получаем битовую строку shared_key длины kem_shared_key_bits. Процедура: 1. Разделить packed_private_key на _||_||packedfpackedfp_||_packedhqprfkey: packed_f длины packed_s3_bytes, packed_fp длины packed_s3_bytes, packed_hq длины packed_s3_bytes и  prf_key длины packed_sq_bytes; 2. (_,)DPKE_Decrypt(__,_)packedrmfailpackedprivatekeypackedciphertext=; 3. _Hash(bytes_to_bits(_,8dpke_plaintext_bytes))sharedkeypackedrm=⋅; 4. _Hash(bytes_to_bits(_,prf_key_bits)||randomkeyprfkey=bytes_to_bits(_,8kem_ciphertext_bytes))packedciphertext⋅; 5. если 0fail=, выход – shared_key; 6. иначе выход – random_key.   14  7 Рекомендуемые параметры Изначально был выбран набор параметров ntruhrss701, поскольку 701n= обеспечивает самый высокий уровень безопасности среди наборов параметров ntru-hrss с 27/2log():28192nq+=≤. При выборе наборов параметров ntru-hps разработчики также пытались максимально повысить безопасность при минимизации q: Разработчики решили рекомендовать только наборы параметров nru-hps со значениями /3/822/3nqn≤−≤, где /82q− – это вес векторов в gL и mL. Параметры веса за пределами этого диапазона рассматриваются как потенциальная угроза безопасности. Таким образом, реализованную систему необходимо использовать со следующими параметрами (таблица 1): Таблица 1 – Рекомендуемые параметры  ntruhps2048509 ntruhps2048677 ntruhps4096821 ntruhrss701 n 509 677 821 701 q 2048 2048 4096 8192 Hash SHA3_256 SHA3_256 SHA3_256 SHA3_256 sample_fixed_type_bits 15240 20280 24630 - sample_iid_bits 4064 5408 6560 5600 sample_key_bits 19304 25688 31190 11200 sample_plaintext_bits 19304 25688 31190 11200 packed_s3_bytes 102 136 164 140 packed_rq0_bytes 699 930 1230 1138 packed_sq_bytes 699 930 1230 1138 dpke_public_key_bytes 699 930 1230 1138 dpke_private_key_bytes 903 1202 1558 1418 dpke_plaintext_bytes 204 272 328 280 dpke_ciphertext_bytes 699 930 1230 1138 kem_public_key_bytes 699 930 1230 1138 15  kem_private_key_bytes 935 1234 1590 1450 kem_ciphertext_bytes 699 930 1230 1138 kem_shared_key_bits 256 256 256 256      16  8 Ожидаемый уровень безопасности Категории безопасности NIST 1, 3 и 5 определяются относительно «вычислительных ресурсов», которые требуются для поиска ключа в блочном шифре с 128-, 192- или 256-битным ключом соответственно. В конкурсе предложений говорится, что «вычислительные ресурсы могут быть измерены с использованием множества различных показателей» и что пороговые значения должны быть удовлетворены «в отношении всех показателей, которые NIST считает потенциально важными для практической безопасности». NIST не указал исчерпывающий набор соответствующих метрик, поэтому разработчики решили предоставить две оценки безопасности: одну относительно нелокальных моделей вычислений и одну относительно локальных моделей вычислений. Атаки на блочные шифры с поиском ключей хорошо работают в локальных моделях вычислений, и кажется маловероятным, что нелокальность может быть использована для значительного повышения производительности. То же самое нельзя сказать об атаках на NTRU. Некоторые из лучших алгоритмов атак, например, алгоритмы сита для задачи кратчайшего вектора, достигают значительно лучшей производительности в нелокальных моделях, чем в локальных. Тем не менее, атакам в локальных моделях не уделяется такого же внимания, и ситуация нестабильна. На рисунке 3 представлены результаты оценок безопасности для нелокальных и локальных моделей вычислений:  Рисунок 3 – оценки безопасности  17  9 Преимущества и недостатки По словам разработчиков, их система обладает следующими преимуществами: 1. Система работает корректно. KEM IND-CCA2 всегда устанавливает ключ; он никогда не прерывается из-за сбоя дешифрования. Это упрощает анализ схемы и делает ее привлекательной заменой KEM, которые используются сегодня. 2. Система хорошо изучена. Среди предположений, лежащих в основе постквантовых криптосистем, хорошо изучена безопасность OWCPA NTRU. NTRU и аналогичные системы часто использовались для оценки новых методов восстановления решетки. Эта история конкретного криптоанализа придает NTRU некоторую уверенность.  3. Гибкость системы. Базовый DPKE может быть параметризован для различных вариантов использования с различными требованиями к размеру, безопасности и эффективности. 4. Простота. DPKE имеет только два основных параметра n и q, и может быть полностью описан в терминах простой целочисленной полиномиальной арифметики. Преобразование в безопасный KEM IND-CCA2 концептуально просто. 5. Система достаточно быстрая, компактная и бесплатная. Также у системы есть ряд ограничений: 1. Несмотря на описанные преимущества, NTRU вряд ли будет самой быстрой, вряд ли будет самой компактной и вряд ли будет самой безопасной системой из предложенных. Однако по продуктам этих мер NTRU будет конкурентоспособен. 2. Выбор оптимальных параметров для NTRU в настоящее время ограничен плохим пониманием неасимптотического поведения новых алгоритмов для SVP. Это ограничение характерно для всех криптосистем на основе решеток.  18  ЗАКЛЮЧЕНИЕ Результатом курсовой работы является составленная пояснительная записка к алгоритму NTRU, который основан на решетчатой криптосистеме и создан в качестве альтернативы RSA и криптосистемам на эллиптических кривых (ECC). В ходе написания были подробно описаны все ключевые моменты алгоритма, такие как: построения ключей, шифрование, дешифрование, описание предлагаемых параметров, анализ стойкости. Также были выявлены и раскрыты его преимущества и недостатки.  19  СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ 1. Andreas Hülsing, Joost Rijneveld, John Schanck, and Peter Schwabe. High-speed key encapsulation from NTRU. In Wieland Fischer and Naofumi Homma, editors, Cryptographic Hardware and Em-bedded Systems - CHES 2017, LNCS. Springer, 2017. 2. Jeffrey Hoffstein, Jill Pipher, and Joseph H. Silverman. NTRU: A new high speed public key cryptosystem, 1996. draft from at CRYPTO '96 rump session. 3. Jeffrey Hoffstein, Jill Pipher, and Joseph H. Silverman. NTRU: A ring-based public key cryptosystem. In Joe P. Buhler, editor, Algorithmic Number Theory - ANTS-III, volume 1423 of LNCS, pages 267-288. Springer, 1998. 4. Tsunekazu Saito, Keita Xagawa, and Takashi Yamakawa. Tightly-secure key-encapsulation mechanism in the quantum random oracle model. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 520-551. Springer, 2018. 