2  1. –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã:  –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π —Å–∏-—Å—Ç–µ–º—ã.  2. –í–∞—Ä–∏–∞–Ω—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã:    –†–∏—Å—É–Ω–æ–∫ 1. –í–∞—Ä–∏–∞–Ω—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã.  3. –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã. –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: N = 30000 ‚Äì —á–∏—Å–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, ¬µ=1.2 ‚Äì –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã, ùúÜ=0.8 ‚Äì –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤ —Å–∏—Å—Ç–µ–º—ã. –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ùëáùëñ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ùëá–≤ùëñ  (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è) –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º: ùëáùëñ=‚àíln[0:1]ùúÜ, ùëá–≤ùëñ=‚àíln[0:1]¬µ. –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ ùëáùëö=50, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–µ–ª–µ–Ω –Ω–∞ 100 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º—É–ª–µ: –ö–≥=ùëÅùë°ùëÅ, –≥–¥–µ ùëÅùë° ‚Äì —á–∏—Å–ª–æ —Å–∏—Å—Ç–µ–º, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—â–∏–π –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t. –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –∫–æ–≥–¥–∞ –±—É–ª–µ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è condition[0] == 1 || condition[1] == 1) && condition[2] == 1 && (condition[3] == 1 || condition[4] == 1 —Ä–∞–≤–Ω–∞ true, –≥–¥–µ condition[i] ‚Äì —Å–æ—Å—Ç–æ—è–Ω–∏–µ i-–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. 3  –¢–∞–∫ –∫–∞–∫ —á–∏—Å–ª–æ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö –±—Ä–∏–≥–∞–¥ –º–µ–Ω—å—à–µ, —á–µ–º —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã, —Ç–æ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö –±—Ä–∏–≥–∞–¥. –ï—Å–ª–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –±—Ä–∏–≥–∞–¥ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ –∏–º–µ–µ—Ç—Å—è, —Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—á–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–µ—Ä–≤–∞—è –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∞—Å—è –±—Ä–∏–≥–∞–¥–∞. –û—Ç–∫–∞–∑–∞–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∏—Ö –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ç—Ä–æ—è.  4. –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–æ–∫ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: 1) –í–µ—Ä—Ö–Ω—è—è –æ—Ü–µ–Ω–∫–∞: –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä—Ö–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —á–∏—Å–ª–æ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö –±—Ä–∏–≥–∞–¥ —É–≤–µ–ª–∏-—á–∏—Ç—Å—è –¥–æ —á–∏—Å–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ, —Ç.–µ. –¥–æ 5. –¢–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω—é—é –æ—Ü–µ–Ω–∫—É –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏-—Ç–∞—Ç—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ: –ö+=–ö1,1‚àó–ö2,2‚àó–ö2,2=–ö1,1‚àó(1‚àí(1‚àí–ö1,1)2)2, –≥–¥–µ –ö1,1=¬µ¬µ+ ùúÜ ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª—É—á–∞—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –æ–¥–Ω–æ–π —Ä–µ–º–æ–Ω—Ç–Ω–æ–π –±—Ä–∏–≥–∞–¥—ã.  –†–∏—Å—É–Ω–æ–∫ 2. –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –æ—Ü–µ–Ω–∫–∏.  2) –ü–µ—Ä–≤–∞—è –Ω–∏–∂–Ω—è—è –æ—Ü–µ–Ω–∫–∞: –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–≤–æ–π –Ω–∏–∂–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º –±—Ä–∏–≥–∞–¥—ã –ø–æ —á–∞—Å—Ç—è–º —Å–∏—Å—Ç–µ–º—ã. –¢–æ-–≥–¥–∞ –ø–µ—Ä–≤—É—é –Ω–∏–∂–Ω—é—é –æ—Ü–µ–Ω–∫—É –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ: –ö1‚àí=–ö2,1‚àó–ö1,1‚àó–ö2,1, –≥–¥–µ –ö2,1=2¬µùúÜ+¬µ22ùúÜ2+2¬µùúÜ+¬µ2 ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª—É—á–∞—è –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –æ–¥-–Ω–æ–π —Ä–µ–º–æ–Ω—Ç–Ω–æ–π –±—Ä–∏–≥–∞–¥—ã. 4   –†–∏—Å—É–Ω–æ–∫ 3. –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–∏–∂–Ω–µ–π –æ—Ü–µ–Ω–∫–∏.  3) –í—Ç–æ—Ä–∞—è –Ω–∏–∂–Ω—è—è –æ—Ü–µ–Ω–∫–∞: –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –∏—Å–∫–ª—é—á–∏–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã. –¢–æ–≥–¥–∞ –≤—Ç–æ-—Ä—É—é –Ω–∏–∂–Ω—é—é –æ—Ü–µ–Ω–∫—É –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ: –ö2‚àí=–ö1,1‚àó–ö1,1‚àó–ö1,1.   –†–∏—Å—É–Ω–æ–∫ 4. –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–Ω–µ–π –æ—Ü–µ–Ω–∫–∏.               5  5. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤:   –†–∏—Å. 5. –ì—Ä–∞—Ñ–∏–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏ –µ–≥–æ –æ—Ü–µ–Ω–æ–∫.  –ò–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –æ —Ç–æ–º, —á—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ-–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–º—Å—è —Ä–µ–∂–∏–º–µ –ª–µ–∂–∏—Ç –Ω–∏–∂–µ –º–∞–∫—Å–∏-–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∏ –≤—ã—à–µ –æ–±–µ–∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. –ó–Ω–∞—á–∏—Ç, –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ.  6. –í—ã–≤–æ–¥  –í —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø—Ä–æ–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞–±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π —Ä–µ-–∑–µ—Ä–≤–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã. –í—ã—è—Å–Ω–∏–ª–∏, —á—Ç–æ –ø—Ä–∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–∏ t –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏-—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∂–∏–º –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π, –∑–Ω–∞—á–µ-–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∏—Ç –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–∞–∫—Å–∏–º—É–º–∞ –∏ –º–∏–Ω–∏–º—É–º–∞.                  6  7. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º:  package com.company;  import java.io.FileWriter; import java.io.IOException; import java.util.ArrayList; import java.util.List;  import static java.lang.Math.*;  public class Main {     public static final int elements = 5;      public static void main(String[] args) {         int n = 30000;         double lambda = 0.8;         double mu = 1.2;         ArrayList<Double> TiLambda1 = new ArrayList<>();         ArrayList<Double> TiMu1 = new ArrayList<>();         ArrayList<Double> TiLambda2 = new ArrayList<>();         ArrayList<Double> TiMu2 = new ArrayList<>();         ArrayList<Double> TiLambda3 = new ArrayList<>();         ArrayList<Double> TiMu3 = new ArrayList<>();         ArrayList<Double> TiLambda4 = new ArrayList<>();         ArrayList<Double> TiMu4 = new ArrayList<>();         ArrayList<Double> TiLambda5 = new ArrayList<>();         ArrayList<Double> TiMu5 = new ArrayList<>();         ArrayList<Double> K = new ArrayList<>();         ArrayList<Double> KEstMax = new ArrayList<>();         ArrayList<Double> KEstMin1 = new ArrayList<>();         ArrayList<Double> KEstMin2 = new ArrayList<>();         double K11 = mu / (lambda + mu);         double K21 = (2 * mu * lambda + pow(mu, 2)) / (2 * pow(lambda, 2) + 2 * mu * lambda + pow(mu, 2));         for (int i = 0; i < n; i++) {             TiLambda1.add(-log(random()) / lambda);             TiMu1.add(-log(random()) / mu);             TiLambda2.add(-log(random()) / lambda);             TiMu2.add(-log(random()) / mu);             TiLambda3.add(-log(random()) / lambda);             TiMu3.add(-log(random()) / mu);             TiLambda4.add(-log(random()) / lambda);             TiMu4.add(-log(random()) / mu);             TiLambda5.add(-log(random()) / lambda);             TiMu5.add(-log(random()) / mu); 7          }         double Tm = 50;         double deltaT = Tm / 100;          for (double i = 0; i < Tm; i += deltaT) {             int nt = countNt(TiLambda1, TiMu1, TiLambda2, TiMu2, TiLambda3, TiMu3, TiLambda4, TiMu4, TiLambda5, TiMu5, i);             K.add((double) nt / n);             KEstMax.add((1 - pow(1 - K11, 2)) * (1 - pow(1 - K11, 2)) * K11);             KEstMin1.add(K21 * K21 * K11);             KEstMin2.add(K11 * K11 * K11);         }         save(K, "K.txt", deltaT);         save(KEstMax, "KEstMax.txt", deltaT);         save(KEstMin1, "KEstMin1.txt", deltaT);         save(KEstMin2, "KEstMin2.txt", deltaT);     }      public static int countNt(ArrayList<Double> TiL1, Ar-rayList<Double> TiM1, ArrayList<Double> TiL2, Ar-rayList<Double> TiM2, ArrayList<Double> TiL3, Ar-rayList<Double> TiM3, ArrayList<Double> TiL4, Ar-rayList<Double> TiM4, ArrayList<Double> TiL5, Ar-rayList<Double> TiM5, double t) {         int count = 0;         for (int i = 0; i < TiL1.size(); i++) {             if (work(TiL1.get(i), TiM1.get(i), TiL2.get(i), TiM2.get(i), TiL3.get(i), TiM3.get(i), TiL4.get(i), TiM4.get(i), TiL5.get(i), TiM5.get(i), t))                 count++;         }         return count;     }      public static boolean work(double TiL1, double TiM1, double TiL2, double TiM2, double TiL3, double TiM3, double TiL4, double TiM4, double TiL5, double TiM5, double t) {         double[] TiL = new double[]{TiL1, TiL2, TiL3, TiL4, TiL5};         double[] TiM = new double[]{TiM1, TiM2, TiM3, TiM4, TiM5};         double[] tmp = new double[elements];         boolean[] check = new boolean[elements];         int[] condition = new int[elements]; 8          do {             for (int i = 0; i < elements; i++) {                 tmp[i] += TiL[i];             }             checkCondition(tmp, elements, t, check, condi-tion, 1);             int indexMax1 = findMax(tmp, elements, 10);             int indexMax2 = findMax(tmp, elements, in-dexMax1);             for (int i = 0; i < elements; i++) {                 if (i == indexMax1 || i == indexMax2)                     continue;                 tmp[i] += TiM[i];             }             int indexMin1 = findMin(tmp, elements, in-dexMax1, indexMax2);             if (tmp[indexMin1] > tmp[indexMax2])                 tmp[indexMax2] = tmp[indexMin1];             tmp[indexMax2] += TiM[indexMax2];             int indexMin2 = findMin(tmp, elements, in-dexMax1, indexMin1);             if (tmp[indexMin2] > tmp[indexMax1])                 tmp[indexMax1] = tmp[indexMin2];             tmp[indexMax1] += TiM[indexMax1];             checkCondition(tmp, elements, t, check, condi-tion, 0);         } while (!check[0] || !check[1] || !check[2] || !check[3] || !check[4]);         return (condition[0] == 1 || condition[1] == 1) && condition[2] == 1 && (condition[3] == 1 || condition[4] == 1);     }      public static void checkCondition(double[] tmp, int size, double t, boolean[] check, int[] condition, int c) {         for (int i = 0; i < size; i++) {             if (tmp[i] >= t && !check[i]) {                 condition[i] = c;                 check[i] = true;             }         }     }      public static int findMax(double[] tmp, int size, int indexMax) {         double max = 0; 9          int index = 100;         for (int i = 0; i < size; i++) {             if (i == indexMax)                 continue;             if (tmp[i] > max) {                 max = tmp[i];                 index = i;             }         }         return index;     }      public static int findMin(double[] tmp, int size, int indexMax1, int indexMax2) {         double min = 1000000;         int index = 100;         for (int i = 0; i < size; i++) {             if (i == indexMax1 || i == indexMax2)                 continue;             if (tmp[i] < min) {                 min = tmp[i];                 index = i;             }         }         return index;     }      public static void save(List<Double> list, String filepath, double step) {         try {             FileWriter fileWriter = new File-Writer(filepath);             for (int i = 0; i < list.size(); ++i) {                 fileWriter.write(i * step + "   " + list.get(i) + "\n");                 fileWriter.flush();             }         } catch (IOException exception) {             exception.printStackTrace();         }     } }  