2  Цель работы:  Разработать и отладить программу с использованием алгоритма моделирования оптимального приемника с белым гауссовским шумом. 1. Задание: Вариант № 6. Квадратурная амплитудная модуляция (КАМ). Параметры: несущая частота f0 = 1800 Гц, модуляционная скорость Vmod = 1200 Бод, информационная скорость Vinf  = 4800 бит/с. 2. Порядок выполнения работы 2.1 Построенные ранее и необходимые для моделирования объекты Для моделирования оптимального приемника используются: базис размерности D = 2:     (1.1)  Вероятность ошибки для сигналов КАМ:   (1.2)    3  Решающие области с сигнальным созвездием:   Рисунок 1. Сигнальные точки и решающие области   4  2.2 Графики данных, полученных с помощью моделирования  Рисунок 2. Результат моделирования для отношения сигнал/шум равным 4 5   Рисунок 3. Результат моделирования для отношения сигнал/шум равным 6  Рисунок 4. Результат моделирования для отношения сигнал/шум равным 14 6   Рисунок 5. Полученная вероятность ошибки при моделировании   Вывод В ходе данной лабораторной работы было выполнено моделирование оптимального приемника и были построены графики для нескольких значений отношения сигнал/шум и значений вероятности ошибки. При увеличении SNR вероятность ошибки уменьшается.   7  Приложение А Листинг программы clear; close all; f0 = 1800; Vm = 1200; Vi = 4800; T = 1 / Vm; q = pow2(Vi/Vm); T = T * 4; Ns = 100; dt = (1 / f0) / Ns; t = 0:dt:T;  index = 1; SS1 = zeros(1, 16); SS2 = zeros(1, 16); A = 15; for i1 = 0:1:sqrt(q)-1 for i2 = 0:1:sqrt(q)-1 s1 = 1-2*i1/(sqrt(q)-1); s2 = 1-2*i2/(sqrt(q)-1);  s1 = A*s1; s2 = A*s2; SS1(index) = s1; SS2(index) = s2; index = index + 1; end end  s = zeros(q,length(t)); %формирование сигналов КАМ for i = 1:q s(i,:) = (SS1(i)*sqrt(2/T).*cos(2*pi*f0*t)) + (SS2(i)*sqrt(2/T).*sin(2*pi*f0*t)); end fi1 = sqrt(2/T)*cos(2*pi*f0*t);%1я базисная функция fi2 = sqrt(2/T)*sin(2*pi*f0*t);%2я базисная функция sij = zeros(q,2); %разложение сигнала по базису for i = 1:q sij(i,1) = trapz(t,s(i,:).*fi1); sij(i,2) = trapz(t,s(i,:).*fi2); end  Ydb = 1 : 1 : 19; Pe = zeros(1, length(Ydb)); Pmax = zeros(1, length(Ydb)); Pteor = zeros(1,length(Ydb)); Emid = sum(s .* s) / (q); Nerrmax = 20;   figure(1); hold on; grid on; plot(sij(:,1), sij(:,2), 'b.', 'MarkerSize',20); for n = 1 : length(Ydb) Y = 10^(Ydb(n)/10); 8  N0 = Emid/Y; sigma = sqrt(sum(Emid / (2 * Y))); Nerr = 0; Ntest = 0; while (Nerr < Nerrmax) i = randi([1,q]); r = s(i,:) + sigma.* randn(1,length(s(i,:))); r1 = trapz(t, r.* fi1); r2 = trapz(t, r.* fi2); d = zeros(1, q); for j = 1:q %считаем расстояния d(1,j) = sqrt((r1 - sij(j,1))^2 + (r2 - sij(j,2))^2); end d_min = Inf; minIdx = 0; for j = 1:q %ищем минимальное расстояния if (d(1,j) < d_min) d_min = d(1,j); minIdx = j; end end  if(n == 14) title(['SNR = ',num2str(Ydb(n)),' [dB]']); plot(r1, r2, 'r.','MarkerSize', 10); end  if(minIdx ~= i) Nerr = Nerr + 1; end Ntest = Ntest + 1; end Pe(n) = Nerr/Ntest; Pteor(n) = 1-(1-2*qfunc(sqrt(3*Emid/N0/(q-1))))*(1-2*qfunc(sqrt(3*Emid/N0/(q-1)))); Pmax(n) = exp(-3/(2*(q - 1))*Y); end %axis([-5 5,-5,5]); set(voronoi(sij(:,1),sij(:,2)),'LineWidth',1); figure(2); semilogy(Ydb, Pmax, 'blue-', Ydb, Pteor, 'black-', Ydb, Pe, 'red.-', 'MarkerSize', 5); legend('Верхн.граница','Теор.оценка','Экспер.оценка'); grid on; xlabel('Y[db]'); ylabel('P'); 