–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã: ................................................................................................................................................ 3 –ó–∞–¥–∞—á–∞: ......................................................................................................................................................... 3 –•–æ–¥ —Ä–∞–±–æ—Ç—ã: ................................................................................................................................................. 3 1. –û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ..................................................................................................................... 3 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ............................................................................................................ 3 3. –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã: ..................................................................................................... 5 –í—ã–≤–æ–¥—ã ......................................................................................................................................................... 8 –õ–∏—Å—Ç–∏–Ω–≥ –∫–æ–¥–∞ .............................................................................................................................................. 9    –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã:  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–≤–æ–∏—á–Ω–æ–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç—Å—Ä–æ—á–∫–∏.  –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–≤–æ–∏—á–Ω–æ–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç—Å—Ä–æ—á–∫–∏.  –•–æ–¥ —Ä–∞–±–æ—Ç—ã:  1. –û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞  –ê–±–æ–Ω–µ–Ω—Ç—ã —É–∑–Ω–∞—é—Ç –æ —Å–æ–±—ã—Ç–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ —Ç–æ–ª—å–∫–æ –≤ –æ–∫–Ω–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏. –í –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –∫–∞–∂–¥—ã–π –∞–±–æ–Ω–µ–Ω—Ç –º–µ–Ω—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ–±—ã—Ç–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–∏ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É:  ùëÉùë°+1={ùëöùëéùë•(ùëùùë°2,ùëÉùëöùëñùëõ) ,–ø—Ä–∏ "–∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ" –≤ –∫–∞–Ω–∞–ª–µùëùùëöùëéùë• ,–ø—Ä–∏ "—É—Å–ø–µ—Ö–µ" –≤ –∫–∞–Ω–∞–ª–µ –ì–¥–µ ùëùùë° ‚Äì –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–π –∞–±–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–≤–∞–ª –ø—Ä–∏ t-–æ–π –ø–µ—Ä–µ–¥–∞—á–µ;  ùëÉùëöùëñùëõ ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏;  ùëùùëöùëéùë• ‚Äì –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏.  –†–∏—Å—É–Ω–æ–∫ 1. –ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–¥–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã–ª–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –ø—É—Ç–µ–º –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –≤—Ö–æ–¥–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ—Ç–æ–∫–∞ (lambda = 2.0), –ø–µ—Ä–µ–±–∏—Ä–∞—è –ø—Ä–∏ —ç—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å. –ü–æ—Å—Ç—Ä–æ–∏–≤ –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞, –∂–µ–ª–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–±—ã–ª–æ —Ç—è–∂–µ–ª–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ª–∏–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π)   –†–∏—Å—É–Ω–æ–∫ 2. –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç P_min –ø—Ä–∏ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –æ–∫–Ω–µ  –†–∏—Å—É–Ω–æ–∫ 3. –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç P_min –ø—Ä–∏ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –æ–∫–Ω–µ  –†–∏—Å—É–Ω–æ–∫ 4. –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç P_min –ø—Ä–∏ 30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –æ–∫–Ω–µ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫  1ùëÄ, –≥–¥–µ M ‚Äì —á–∏—Å–ª–æ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ–∫–Ω–µ.    3. –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:   –†–∏—Å—É–Ω–æ–∫ 5. –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  –†–∏—Å—É–Ω–æ–∫ 6.–≥—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  –†–∏—Å—É–Ω–æ–∫ 7. –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è 1 –∞–±–æ–Ω–µ–Ω—Ç–∞      –†–∏—Å—É–Ω–æ–∫ 8. –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  –†–∏—Å—É–Ω–æ–∫ 9. –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  –†–∏—Å—É–Ω–æ–∫ 10. –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è 5 –∞–±–æ–Ω–µ–Ω—Ç–æ–≤      –†–∏—Å—É–Ω–æ–∫ 11. –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è 15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  –†–∏—Å—É–Ω–æ–∫ 12. –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è 15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  –†–∏—Å—É–Ω–æ–∫ 13 . –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è 15 –∞–±–æ–Ω–µ–Ω—Ç–æ–≤   –í—ã–≤–æ–¥—ã  –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –∏–∑—É—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–≤–æ–∏—á–Ω–æ–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç—Å—Ä–æ—á–∫–∏. –¢–∞–∫ –∂–µ –±—ã–ª–∏ –≤—ã—è–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–∞–º: –ø–æ—Å–ª–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏  –ø–æ—Ç–æ–∫–∞, —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.     –õ–∏—Å—Ç–∏–Ω–≥ –∫–æ–¥–∞ import math from alive_progress import alive_bar import queue import random from pathlib import Path from message import Message from user import User import graphics  MAX_TIME = 50000  file_practice_D = None file_theoretic_D = None file_practice_N = None file_theoretic_N = None file_lambda = None # queue_messages = queue.Queue() count_users_in_system = 0  count_users_in_one_window = 10 users_in_one_window = [] current_sending_user = 0  my_lambda_out = 0   def init_files():     global file_practice_D     global file_practice_N     global file_theoretic_D     global file_theoretic_N     global file_lambda     file_path_practic_D = Path(Path.cwd().parent, "outputData", "10average_delay.txt")     # file_path_theoretic_D = Path(Path.cwd().parent, "outputData", "synch_theoretic_D.txt")     file_path_practic_N = Path(Path.cwd().parent, "outputData", "10average_N.txt")     # file_path_theoretic_N = Path(Path.cwd().parent, "outputData", "synch_theoretic_N.txt")     file_path_lambda = Path(Path.cwd().parent, "outputData", "10lambda.txt")      file_practice_D = open(file_path_practic_D, 'w')     # file_theoretic_D = open(file_path_theoretic_D, 'w')     file_practice_N = open(file_path_practic_N, 'w')     # file_theoretic_N = open(file_path_theoretic_N, 'w')     file_lambda = open(file_path_lambda, 'w')   def get_queue_size(my_lambda):     L = math.exp(-my_lambda)     # L = math.pow(10, -5)     p = 1.0     k = 0     while True:         k += 1         p *= random.random()         if p < L:             break     return k - 1   def create_queue_messages(my_lambda, t, index_user):     size_queue = get_queue_size(my_lambda / count_users_in_one_window)      values = []     for i in range(size_queue):         values.append(random.random())     values.sort()     for i in range(size_queue):         bf = Message(values[i] + t)         # queue_messages.put(bf)         users_in_one_window[index_user].add_new_message_in_queue(bf)     global count_users_in_system     count_users_in_system += users_in_one_window[index_user].get_size_queue()     # return queue_messages   def check_conflict():     count_users_sending = 0     users_sending = []     for i in range(count_users_in_one_window):         if users_in_one_window[i].choose_pass_or_dont_pass():             users_sending.append(i)             count_users_sending += 1     if count_users_sending > 1:  # —Å–æ–±—ã—Ç–∏–µ "–∫–æ–Ω—Ñ–ª–∏–∫—Ç"         for index in users_sending:             users_in_one_window[index].was_conflict()         return True     elif count_users_sending == 1:  # —Å–æ–±—ã—Ç–∏–µ "—É—Å–ø–µ—Ö"         global current_sending_user         # print(users_sending)         current_sending_user = users_sending[0]         users_in_one_window[current_sending_user].was_success()         return False     elif count_users_sending == 0:  # —Å–æ–±—ã—Ç–∏–µ "–ø—É—Å—Ç–æ"         return True   def clear_data_for_all_users():     for i in range(count_users_in_one_window):         # print(f"clear queues ")         # print(f"size[{i}] before = {users_in_one_window[i].get_size_queue()}")         users_in_one_window[i].set_start_P()         users_in_one_window[i].clear_queue()         # print(f"size[{i}] after = {users_in_one_window[i].get_size_queue()}\n")   def add_users_in_system():     global users_in_one_window     global count_users_in_one_window     for _ in range(count_users_in_one_window):         users_in_one_window.append(User())   def create_queue_for_all_users(my_lambda, t):     for i in range(count_users_in_one_window):         create_queue_messages(my_lambda, t, i)   def print_p_users():     for i in range(count_users_in_one_window):         print(f"{i} user")         users_in_one_window[i].print_P()   def set_P_min_for_all_users(p_min: int):     for i in range(count_users_in_one_window):         users_in_one_window[i].set_min_p(p_min)   def find_critical_P_min():     add_users_in_system()     file_path = Path(Path.cwd().parent, "outputData",                      f"critical_P_min {count_users_in_one_window} users lambda=0.33.txt")     p_min = 0.05     with open(file_path, 'w') as file:         with alive_bar(int(1 / 0.05 - 1), dual_line=True) as bar:             bar.text = '\t-> working, please wait...'             while p_min < 1:                 set_P_min_for_all_users(p_min)                 simulate_messaging(0.31)                 file.write(f"{round(p_min, 4)} {round(get_lambda_out(), 4)}\n")                 p_min += 0.05                 bar()   def simulate_messaging(my_lambda):     # print(my_lambda)     clear_data_for_all_users()     t = 0     global my_lambda_out     sent_messages = []     # print(len(users_in_one_window))     while t < MAX_TIME:         # print(f"t = {t}")         # print_p_users()         # print(users_in_one_window[0].get_queue_empty())         # if not users_in_one_window[0].get_queue_empty():         if not check_conflict():  # –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç             buffer_message = users_in_one_window[current_sending_user].get_one_message()             # print(current_sending_user)             buffer_message.exit_time = t + 1             sent_messages.append(buffer_message)             my_lambda_out += 1          create_queue_for_all_users(my_lambda, t)         # count_users_in_system += queue_messages.qsize()          t += 1      global count_users_in_system     count_users_in_system /= MAX_TIME     my_lambda_out /= MAX_TIME     return sent_messages   def get_average_practical_delay(my_lambda):     delay = 0     sent_message = []     global count_users_in_system     count_users_in_system = 0     sent_message = simulate_messaging(my_lambda)     for i in range(len(sent_message)):         delay += sent_message[i].get_delta()      # print("delay = ", delay)     # average_delay = delay / len(sent_message)     # print("average delay = ", average_delay)     # print("\n")     return delay / len(sent_message)   def get_average_theoretical_delay(my_lambda):     d = (my_lambda * (2 - my_lambda)) / (2 * (1 - my_lambda))     return d / my_lambda + 0.5   def get_average_count_users(my_lambda):     global count_users_in_system     return count_users_in_system   def get_average_theoretical_count_users(my_lambda):     n = (my_lambda * (2 - my_lambda)) / (2 * (1 - my_lambda))     return n   def get_lambda_out():     global my_lambda_out     return my_lambda_out   def make():     init_files()     my_lambda = 0.05     # print("synchronous system")     count_step = int(1 / 0.05 - 1)     add_users_in_system()     with alive_bar(count_step, dual_line=True) as bar:         bar.text = '\t-> The synchronous system working, please wait...'         while my_lambda < 1:             # print("lambda = ", my_lambda)             file_practice_D.write(f"{round(my_lambda, 3)} {round(get_average_practical_delay(my_lambda), 4)}\n")             # file_theoretic_D.write(f"{round(my_lambda, 3)} {round(get_average_theoretical_delay(my_lambda), 4)}\n")             file_practice_N.write(f"{round(my_lambda, 3)} {round(get_average_count_users(my_lambda), 4)}\n")             # file_theoretic_N.write(             #     f"{round(my_lambda, 3)} {round(get_average_theoretical_count_users(my_lambda), 4)}\n")             file_lambda.write(f"{round(my_lambda, 3)} {round(get_lambda_out(), 4)}\n")             my_lambda += 0.05             bar()     file_practice_D.close()     file_practice_N.close()     # file_theoretic_D.close()     # file_theoretic_N.close()     file_lambda.close()   if __name__ == "__main__":     make()     # graphics.draw_all_graphics()     # find_critical_P_min()     # add_users_in_system()     # simulate_messaging(0.95)   class User  import queue import random # import binary_exponential_delay_algorithm  from message import Message   class User:     __P_previous = 1.0  # P_(t)     __P_current = 1.0  # P_(t-1)     __P_min = 0.15     __P_max = 1.0     __P_most_min = 1.0     __queue_message = queue.Queue()      def __init__(self, P_previous=1.0, P_current=1.0):         self.__P_previous = self.__P_max         self.__P_current = self.__P_max      def set_min_p(self, p_min):         self.__P_min = p_min      # @property     # def P_current(self):     #     return self.__P_current     #     # @property     # def P_privious(self):     #     return self.__P_previous     def get_minimal_P(self):         return self.__P_most_min      def set_start_P(self):         self.__P_previous = self.__P_max         self.__P_current = self.__P_max      def get_one_message(self):         return self.__queue_message.get()      def set_queue(self, q: queue.Queue()):         # self.__queue_message.queue.clear()         self.__queue_message = q      def add_new_message_in_queue(self, message: Message):         self.__queue_message.put(message)      def choose_pass_or_dont_pass(self):         if random.random() <= self.__P_current and self.__queue_message.qsize() > 0:             # self.__P_previous = self.__P_current             return True         else:             return False      def was_conflict(self):         self.__P_current = max(self.__P_current / 2, self.__P_min)      def was_success(self):         # self.__P_previous = self.__P_current         self.__P_current = self.__P_max      def clear_queue(self):         self.__queue_message.queue.clear()      def get_queue_empty(self):         return self.__queue_message.empty()      def get_size_queue(self):         return self.__queue_message.qsize()      def print_P(self):         print(f"P_previous = {self.__P_previous}"               f"\nP_current = {self.__P_current}"               f"\nP_min = {self.__P_min}"               f"\nP_max = {self.__P_max}\n")     # def create_queue(self, size_queue: int):     #     values = []     #     for i in range(size_queue):     #         values.append(random.random())     #     values.sort()     #     for i in range(size_queue):     #         bf = Message(values[i])     #         self.__queue_message.put(bf)     #     # def print_all_queue(self):     #     i = 0     #     print(self.__queue_message.empty())     #     while not self.__queue_message.empty():     #         self.__queue_message.get().print()     #         i += 1   def create_q(size_queue: int):     values = []     qu = queue.Queue()     for i in range(size_queue):         values.append(random.random())     values.sort()     for i in range(size_queue):         bf = Message(values[i])         qu.put(bf)     return qu   if __name__ == '__main__':     us = User()     print(us.P_current, us.P_privious)     # us.create_queue(10)     # us.set_queue(create_q(10))     print(us.get_queue_empty())     us.print_all_queue()     print(us.choose_pass_or_dont_pass())  