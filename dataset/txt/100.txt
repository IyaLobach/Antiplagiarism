2 Цель работы Получить навыки обеспечения конфиденциальности баз данных методом шифрования. Формулировка задания 1. Для своего варианта выполнения лабораторных работ определите приватные (требующие шифрования):  a. По крайней мере одно отношение;  b. По крайней мере 2 столбца разного типа данных в отношении, в котором также будут присутствовать незашифрованные данные.  2. Реализовать шифрование в СУБД (для всех допустимых в бесплатной версии режимах), включая:  a. Шифрование столбцов таблицы (см.п.1)  b. Шифрование всей таблицы (см.п.1)  c. Шифрование файлов данных на диске (и только)  d. Шифрование данных при передаче.  e. Сквозное шифрование всех объектов, включая данные в памяти (если возможно).  3. При использовании штатных режимов шифрования, укажите, какие задачи из перечисленных они позволяют решить.  4. Укажите для каждой из задач 2.a – 2.e возможно ли ее решение с разным уровнем конфиденциальности (для пользователей с разным доступом). Реализуйте примеры где это возможно.  5. Для каждого практического примера оцените изменение производительности и объема данных, проведя для измерения производительности 6-10 тестов на объеме данных, обеспечивающим должный уровень нагрузки (задержку не менее нескольких секунд).  Описание варианта №1: Данные Пользователи Больница   3 Врач (персональные данные включая ФИО и номер(а) документа(ов), специальность, квалификация, стаж, предыдущие места работы, рейтинг, зарплата)  Пациент (персональные данные включая ФИО и номер(а) документа(ов), тип страховки, рейтинг) История болезни (приемы у врачей, диагнозы, анализы, назначения)  Лабораторный журнал (пациент, врач, анализы, дата сдачи, дата получения, значения измеренных показателей, стоимость)  Расписание приемов (врач, пациент, кабинет, стоимость, начало приема, конец приема)  Кабинеты (тип кабинета, номер, специализации принимающих врачей)  Врач Пациент Администратор  Ход работы 1. Определение приватных полей Для шифрования была выбрана таблица doctor. Это обусловлено тем, что данные о докторах являются персональными и требуют защиты. В качестве защищаемых столбцов были выбраны столбцы salary и qualification. 2. Реализация шифрования в СУБД a. Шифрование столбцов таблицы Модуль pgcrypto позволяет хранить в зашифрованном виде избранные поля. Установка pgcrypto: CREATE EXTENSION IF NOT EXISTS pgcrypto; Для шифрования данных использовались функции pgp_sym_encrypt(), pgp_sym_decrypt() из этого модуля. Это функции симметричного шифрования, по умолчанию используется алгоритм AES128.  Выбранные ранее столбцы каждого кортежа отношения doctor были зашифрованы и расшифрованы. Для типов данных отличных от символьных пришлось создавать вспомогательный столбец для хранения в зашифрованном виде. Результаты приведены на рисунках 1, 2. На рисунке 3 представлены функции зашифрования и расшифрования. 4  Рисунок 1 – Шифрование отдельных столбцов  Рисунок 2 – Расшифрование отдельно зашифрованных столбцов  Рисунок 3 – Функции зашифрования и расшифрования отдельных столбцов b. Шифрование всей таблицы В PostgreSQL нет режима шифрования всей таблицы, поэтому он был реализован путем шифрования каждого столбца аналогично предыдущему пункту. Однако есть некоторые ограничения. Если первичный ключ, не содержит 5 чувствительных данных, можно его оставить в открытом виде. Либо необходимо поменять все ссылки на поля таблицы. Результаты приведены на рисунках 4, 5. На рисунках 6, 7 представлены функции зашифрования и расшифрования.  Рисунок 4 – Шифрование всего отношения  Рисунок 5 – Расшифрование всего отношения  Рисунок 6 – Функция зашифрования всего отношения 6  Рисунок 7 – Функция расшифрования всего отношения c. Шифрование файлов данных на диске (TDE) PostgreSQL не поддерживает шифрование файлов на физическом диске. Если существует необходимость хранить все данные зашифрованными, то можно воспользоваться технологией Transparent Data Encryption (TDE), или любой другой для шифрования файловой системы.  Шифрование хранилища может выполняться на уровне файловой системы или на уровне блоков. Для шифрования была использована встроенная в Windows утилита EFS. Чтобы включить EFS-шифрование для папки, нужно просто включить соответствующий атрибут в ее свойствах (см. рис. 8-9).  Рисунок 8 – Включение шифрования папки data 7  Рисунок 9 – Зашифрованные данные d. Шифрование данных при передаче (TLS) SSL-соединения шифруют все данные, передаваемые по сети: пароль, запросы и возвращаемые данные. Файл pg_hba.conf позволяет администраторам указать, для каких узлов будут разрешены незашифрованные соединения (host), а для каких будет требоваться SSL (hostssl). Необходимо добавить соединение с шифрованием (см. рис. 10).  Рисунок 10 – Добавление соединения с шифрованием Также необходимо сгенерировать сертификат и ключ к нему. Генерация реализована с помощью утилиты openssl (см. рис. 11).   Рисунок 11 – Генерация ключа и сертификата Также был изменён конфигурационный файл postgresql.conf. Необходимо разрешить соединение с SSL и прописать пути до сертификата и ключа. ssl = on ssl_ca_file = 'C:\\Program Files\\PostgreSQL\\14\\data\\root.crt' ssl_cert_file = 'C:\\Program Files\\PostgreSQL\\14\\data\\server.crt' ssl_key_file = 'C:\\Program Files\\PostgreSQL\\14\\data\\server.key' 8 ssl_prefer_server_ciphers = on ssl_min_protocol_version = 'TLSv1.3'  На рисунках 12, 13 представлен результат соединения.  Рисунок 12 – Сообщение при входе  Рисунок 13 – Сообщение в журнале e. Сквозное шифрование Сквозное шифрование также называется шифрованием на стороне клиента. Если системный администратор сервера, где работает база данных, не является доверенным, клиент должен сам шифровать данные; тогда незашифрованные данные никогда не появятся на этом сервере. В этом случае клиент шифрует данные, прежде чем передавать их серверу, а получив из базы данных результаты, он расшифровывает их для использования. Шифровать данные нужно перед отправкой сообщения. Для этого можно также воспользоваться утилитой командной строки openssl. На рисунке 14 представлен пример шифрования данных.  Рисунок 14 – Шифрование данных с помощью утилиты openssl 9 На рисунке 15 представлен пример отправки зашифрованных сообщений и результат запроса этих данных.  Рисунок 15 – Отправка зашифрованных сообщений и результат запроса На рисунке 16 представлено расшифрование полученных данных.  Рисунок 16 – Расшифрование данных с помощью утилиты openssl 3. Результаты тестирования производительности и объёма данных Для выполнения тестов в таблицу doctor было добавлено 100000 записей. Результаты тестирования режимов шифрования на производительность с помощью выполнения запроса представлены в таблице 1.  Без шифрования Шифрование 2 столбцов Шифрование всех столбцов TDE TLS На стороне клиента Среднее время, мc 216 12496 17326 2925 2698 15693 Общий размер файла БД на диске, Мб 25,33 64,2 107,3 25,33 25,33 72,9 Таблица 1 – Результаты тестов Без шифрования доступ к данным и занимаемое на диске место наиболее эффективны.  Шифрование нескольких (2) столбцов значительно увеличило время запроса. Это объясняется накладными расходами на расшифрование во время выполнения 10 запроса. Также увеличился размер данных, так как увеличился минимальный размер блока после шифрования. Шифрование всей таблицы ещё значительно увеличило занимаемое пространство по той же причине. Время доступа также увеличилось. Наконец, шифрование при передаче, очевидно, никак не отразилось на занимаемом на диске пространстве, ведь данные хранятся в открытом виде. Время же доступа к данным немного выросло, но меньше, чем при шифровании столбцов.  Вывод В ходе выполнения лабораторной работы были изучены доступные режимы шифрования в СУБД PostgreSQL. Были исследованы их влияние на ресурсы системы – как на память, так и на время. Были получены навыки по настройке шифрования. 