2  Оглавление 1. Постановка задачи ............................................................................................ 3 2. Описание алгоритма ......................................................................................... 3 3. Основные параметры ........................................................................................ 3 4. Алгоритм FrodoPKE ......................................................................................... 4 Генерация ключей ............................................................................................... 4 Шифрование ........................................................................................................ 5 Дешифрование ..................................................................................................... 5 5. Фудзисаки-Окамото преобразование из PKE в KEM ................................... 5 6. Алгоритм FrodoKEM ........................................................................................ 6 Генерация ключей ............................................................................................... 6 Инкапсуляция ключей ........................................................................................ 6 Декапсуляция ключей ......................................................................................... 7 Параметры для KEM ........................................................................................... 8 7. Преимущества и недостатки ............................................................................ 8 Преимущества...................................................................................................... 8 Недостатки ........................................................................................................... 9 8. Вывод ................................................................................................................. 9 Список литературы ................................................................................................. 9                    3  1. Постановка задачи Задачей данной курсовой работы является создание пояснительной записки с пояснением алгоритма – участника второго раунда конкурса национального института стандартов и технологий (NIST) по выбору квантово-устойчивых криптоалгоритмов для стандартизации. В данной курсовой работе будет рассматриваться алгоритм FrodoKEM. 2. Описание алгоритма Из-за возможности мощных квантовых компьютеров взламывать ныне широко используемые системы шифрования, основанные на задачах дискретного логарифмирования и задачах факторизации целых  чисел, было принято решение стандартизировать постквантовый криптографический алгоритм шифрования. FrodoKEM разработан как консервативный, но практичный постквантовый алгоритм. Ядром FrodoKEM является алгоритм шифрования на основе открытого ключа FrodoPKE, чья безопасность проистекает из тонкой параметризации хорошо изученной проблемы обучения с ошибками (LWE), которая, в свою очередь, имеет тесные связи с криптографией на решетках – задаче оптимизации на дискретных аддитивных подгруппах, заданных на множестве n. Также существует несколько разновидностей FrodoKEM:  FrodoKEM-640, FrodoKEM-976 и FrodoKEM-1344. Различаются они лишь уровнем обеспечения безопасности: соответствующий или превышающий безопасность от брутфорса AES-128, AES-192 и AES-256 соответственно. 3. Основные параметры Основные параметры FrodoPKE и FrodoKEM: • χ, равномерное распределение вероятностей на ; • 2Dq=, целочисленная степень двойки,16D≤; • ,,nmn, целочисленные размерности матрицы,0mod(8)n≡; • BD≤, количество бит, закодированных в каждой записи матрицы; • Bmn=⋅⋅, длина битовых строк, закодированных как матрицы размера m на n; • lenµ=, длина сообщения в битах; • {}len0,1Mµ=, пространство сообщений; • Aseedlen, битовая длина начальных значений, используемых для генерации псевдослучайных матриц; 4  • SEseedlen, битовая длина начальных значений, используемых для генерации псевдослучайных битов для выборки ошибок; • Gen, алгоритм генерации матрицы (AES-128 или SHAKE-128); • Tχ, таблица распределения для выборки;  Также алгоритм FrodoKEM использует дополнительные 5 параметров: • slen, длина битового вектора s, используемого для генерации псевдослучайного общего секрета в случае сбоя декапсуляции в преобразовании FO′⊥; • zlen, битовая длина начального числа, используемого для псевдослучайной генерации seedA; • klen, битовая длина промежуточного общего секрета k в преобразовании FO′⊥; • pkhlen, разрядность хеша1()Gpkоткрытого ключа в преобразовании FO′⊥; • sslen, битовая длина ключа шифрования ss в преобразовании FO′⊥; 4. Алгоритм FrodoPKE Генерация ключей 1. Выбор случайного начального числа seedA, где последовательность бит реализована по закону равномерного распределения $seedlen({0,1})seedU←AA 2. Генерация матрицы nnq×∈A на основе генератора псевдослучайных чисел со стартовым значением seedA, Frodo.Gen(seed)←AA  3. Выбор случайного начального числа SEseed, где последовательность бит реализована по закону равномерного распределения $seedlen({0,1})seedU←SESE 4. Генерация псевдослучайной битовой строки (0)(1)(21)(,,...,)SHAKE(0x5F||seed, 2nnlen)nnχ−←⋅SErrr 5. Матрица ошибок (0)(1)(1)Frodo.SampleMatrix((,,...,)),,,)nnnnTχ−←Srrr 6. Матрица ошибок ()()()121Frodo.SampleMatrix((,,...,)),,,)nnnnnnnnTχ+−←Errr 7. Вычислить B=AS+E  8. Выходные данные: открытый ключ (seed,)pk←AB и секретный  ключ sk←S 5  Шифрование Входные данные: сообщение Mµ∈ и открытый ключ (seed,)pk=AB 1. Генерация Frodo.Gen(seed)←AA 2. Выбор случайного начального числа SEseed, где последовательность бит реализована по закону равномерного распределения $seedlen({0,1})seedU←SESE 3. Генерация псевдослучайной битовой строки (0)(1)(21)(,,...,)SHAKE(0x96||seed, 2+len)mnmnmnmnχ+−←⋅SErrr 4. Матрица ошибок (0)(1)(1)Frodo.SampleMatrix((,,...,)),,,)mnmnTχ−′←Srrr 5. Матрица ошибок ()()()121Frodo.SampleMatrix((,,...,)),,,)mnmnmnmnTχ+−′←Errr 6. Матрица ошибок (2)(2)()121Frodo.SampleMatrix((,,...,)),mnmnmnmn++−′′←Errr,,)mnTχ 7. Вычислить ′′′B=SA+E и ′′′V=SB+E 8. Выходные данные: шифртекст 12(,)(,Frodo.Encode())cµ′←=+CCBV Дешифрование Входные данные: шифртекст 12(,)c=CC и секретный ключ sk=S 1. Вычислить 21=−MCCS 2. Выходные данные: сообщение Frodo.Decode()µ′←M  5. Фудзисаки-Окамото преобразование из PKE в KEM  Пусть PKE=(KeyGen,Enc,Dec) - алгоритм ассиметричного шифрования с пространством сообщений M и пространством шифртекстов C, где R – это вероятностное пространство Enc. Пусть slen, klen, pkhlen, sslen - это параметры, аpkh1len:{0,1}{0,1}G∗→,k2len:{0,1}{0,1}GR∗→×и sslen:{0,1}{0,1}F∗→- хеш-функции. Обозначим 12KEM=FO[PKE,,,]GGF′′⊥⊥ как алгоритм инкапсуляции ключа. 6   Рисунок 1. Конструкция алгоритма инкапсуляции KEM из PKE и хеш-функций 12,,GGF 6. Алгоритм FrodoKEM Генерация ключей 1. Выбор случайных начальных чисел s,seedSEи z где последовательность бит реализована по закону равномерного распределения $seedlen+lenlen({0,1})||seed||U+←szSESEsz 2. Генерация псевдослучайного начального числа seedAseedSHAKE(,len)←Az 3. Генерация матрицы nnq×∈A на основе генератора псевдослучайных чисел со стартовым значением seedA, Frodo.Gen(seed)←AA  4. Генерация псевдослучайной битовой строки (0)(1)(21)(,,...,)SHAKE(0x5F||seed, 2nnlen)nnχ−←⋅SErrr 5. Матрица ошибок (0)(1)(1)Frodo.SampleMatrix((,,...,)),,,)nnnnTχ−←Srrr 6. Матрица ошибок ()()()121Frodo.SampleMatrix((,,...,)),,,)nnnnnnnnTχ+−←Errr 7. Вычислить ←BAS+E  8. Вычислить Frodo.Pack()←bB  9. Вычислить SHAKE(seed||,len)←Apkhpkhb  10. Выходные данные: открытый ключ seed||pk←Ab и секретный  ключ (||seed||,,)sk′←AsbSpkh Инкапсуляция ключей Входные данные: открытый ключ seed||pk=Ab 1. Выбор случайного ключа µ где последовательность бит реализована по закону равномерного распределения $len({0,1})Uµµ← 2. Вычислить SHAKE(, len)pk←pkhpkh  3. Генерация псевдослучайных seed||SEkseedSHAKE(||, len+len)µ←SEkpkh 7  4. Генерация псевдослучайной битовой строки (0)(1)()21(,,...,)SHAKE(0x96||seed, 2+len)mnmnmnmnχ+−←⋅SErrr 5. Матрица ошибок (0)(1)()1Frodo.SampleMatrix((,,...,)),,,)mnmnTχ−′←Srrr 6. Матрица ошибок ()()()121Frodo.SampleMatrix((,,...,)),,,)mnmnmnmnTχ+−′←Errr 7. Генерация Frodo.Gen(seed)←AA 8. Вычислить ′′′B=SA+E 9. Вычислить Frodo.Pack()′←1cB 10. Матрица ошибок (2)(2)()121Frodo.SampleMatrix((,,...,)),mnmnmnmn++−′′←Errr,,)mnTχ 11. Вычислить Frodo.Unpack(,,)nn←Bb 12. Вычислить ′′′V=SB+E 13. Вычислить Frodo.Encode()µ←+CV 14. Вычислить Frodo.Pack()←2cC 15. Вычислить SHAKE(||||, len)←12sssscck  16. Выходные данные: шифртекст ||12cc и ключ шифрования ss  Декапсуляция ключей Входные данные: шифртекст ||12cc и секретный ключ sk′(||seed||,,)←AsbSpkh 1. Вычислить Frodo.Unpack()′←1Bc 2. Вычислить Frodo.Unpack()←2Cc 3. Вычислить ′←−MCBS 4. Вычислить Frodo.Decode()µ′←M 5. Преобразовать seed||pk←Ab 6. Генерация псевдослучайных seed||′′SEkseedSHAKE(||, len+len)µ′←SEkpkh 7. Генерация псевдослучайной битовой строки (0)(1)()21(,,...,)SHAKE(0x96||seed, 2+len)mnmnmnmnχ+−←⋅SErrr 8. Матрица ошибок (0)(1)()1Frodo.SampleMatrix((,,...,)),,,)mnmnTχ−′←Srrr 9. Матрица ошибок ()()()121Frodo.SampleMatrix((,,...,)),,,)mnmnmnmnTχ+−′←Errr 10. Генерация Frodo.Gen(seed)←AA 11. Вычислить ′′′′←BSA+E 12. Матрица ошибок (2)(2)()121Frodo.SampleMatrix((,,...,)),mnmnmnmn++−′′←Errr,,)mnTχ 13. Вычислить Frodo.Unpack(,,)nn←Bb 14. Вычислить ′′′←VSB+E 8  15. Вычислить Frodo.Encode()µ′′←+CV 16. Если ||||′′′′=BCBC, то 17. Выходные данные: ключ шифрования SHAKE(||||, len)′←12sssscck 18. Иначе 19. Выходные данные: ключ шифрования SHAKE(||||, len)←12ssssccs  Параметры для KEM Таблица 1. Параметры для KEM и защита и точность для них Вероятность ошибки Тип атаки Обычный компьютер Квантовый компьютер Размер pk (в байтах) Размер sk (в байтах) Размер шифртекста (в байтах) FrodoKEM-640:  n = 640, q = 215, χ=[-12…12], B =2, 88mn×=× 2-138.7 первичная двойственная 149 148 108 108 9616 19888 9736 FrodoKEM-976: n = 976, q = 216, χ=[-10…10], B =3, 88mn×=× 2-199.6 первичная двойственная 214 214 155 154 15632 31296 15768 FrodoKEM-1344: n = 1344, q = 216, χ=[-6…6], B =4, 88mn×=× 2-252.5 первичная двойственная 281 279 202 201 21632 43088 21664  7. Преимущества и недостатки Преимущества • Простота реализации. Реализация x64: 256 строк простого C кода (+ ранее существовавшие примитивы).  • Константное время выполнения. Благодаря отсутствию модульных сокращения, поскольку все числа являются степени двойки, нет явных модульных преобразований, поэтому легко добиться константного времени работы. • Совместимость с существующими системами и алгоритмами. У FrodoKEM открытый ключ и инкапсуляция больших размеров, чем у привычного RSA или других постквантовых алгоритмов, например, основанных на RLWE. Тем не менее, их коммуникационные размеры достаточно малы, чтобы они все еще были совместимы со многими существующими развертываниями. • Защита от атак по сторонним каналам. В настоящее время неизвестны ни атаки по сторонним каналам, ни контрмеры для механизмов инкапсуляции ключей LWE. Но общие методы атак, а также контрмеры, которые применяются к RLWE, также применимы к LWE. Однако, поскольку FrodoKEM не использует методы умножения на основе БПФ, то возможности для атаки значительно уменьшены. 9  Недостатки • Относительно медленная работа шифрования и дешифрования. • Функциональность алгоритма ограничена схемой шифрования и KEM. Схема подписи не предусмотрена.  8. Вывод Результатом данной курсовой работы является описание постквантового криптографического алгоритма FrodoKEM – участника конкурса NIST. В ходе проведения работы были описаны все ключевые моменты алгоритма, а также выявлены преимущества и недостатки.   Список литературы 1. D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green, J. A. Halderman, N. Heninger, D. Springall, E. Thom´e, L. Valenta, B. VanderSloot, E. Wustrow, S. Zanella-B´eguelin, and P. Zimmermann. Imperfect forward secrecy: How Diffie-Hellman fails in practice. In I. Ray, N. Li, and C. Kruegel, editors, ACM CCS 2015: 22nd Conference on Computer and Communications Security, pages 5–17. ACM Press, Oct. 2015.  2. D. Aharonov and O. Regev. Lattice problems in NP ∩ coNP. Journal of the ACM, 52(5):749–765, 2005. Preliminary version in FOCS 2004.  3. M. R. Albrecht. On dual lattice attacks against small-secret LWE and parameter choices in HElib and SEAL. In J. Coron and J. B. Nielsen, editors, Advances in Cryptology – EUROCRYPT 2017, Part II, volume 10211 of Lecture Notes in Computer Science, pages 103–129. Springer, Heidelberg, Apr. / May 2017.  4. M. R. Albrecht, C. Cid, J.-C. Faug`ere, and L. Perret. Algebraic algorithms for LWE. Cryptology ePrint Archive, Report 2014/1018, 2014. http://eprint.iacr.org/2014/1018.  5. M. R. Albrecht, J.-C. Faug`ere, R. Fitzpatrick, and L. Perret. Lazy modulus switching for the BKW algorithm on LWE. In H. Krawczyk, editor, PKC 2014: 17th International Conference on Theory and Practice of Public Key Cryptography, volume 8383 of Lecture Notes in Computer Science, pages 429–445. Springer, Heidelberg, Mar. 2014.  6. M. R. Albrecht, R. Fitzpatrick, and F. G¨opfert. On the efficacy of solving LWE by reduction to uniqueSVP. In H.-S. Lee and D.-G. Han, editors, ICISC 13: 16th International Conference on Information Security and Cryptology, volume 8565 of Lecture Notes in Computer Science, pages 293–310. Springer, Heidelberg, Nov. 2014.  7. M. R. Albrecht, F. G¨opfert, F. Virdia, and T. Wunderer. Revisiting the expected cost of solving uSVP and applications to LWE. In T. Takagi and T. Peyrin, editors, Advances in Cryptology – ASIACRYPT 2017, Part I, 10  volume 10624 of Lecture Notes in Computer Science, pages 297–322. Springer, Heidelberg, Dec. 2017.  8. M. R. Albrecht, R. Player, and S. Scott. On the concrete hardness of Learning with Errors. Journal of Mathematical Cryptology, 9(3):169–203, Nov 2015.  9. E. Alkim, L. Ducas, T. P¨oppelmann, and P. Schwabe. Post-quantum key exchange - A new hope. In T. Holz and S. Savage, editors, USENIX Security 2016: 25th USENIX Security Symposium, pages 327–343. USENIX Association, Aug. 2016.  10. A. Andoni, T. Laarhoven, I. P. Razenshteyn, and E. Waingarten. Optimal hashing-based time-space trade-offs for approximate near neighbors. In P. N. Klein, editor, 28th Annual ACM-SIAM Symposium on Discrete Algorithms, pages 47–66. ACM-SIAM, Jan. 2017.  11. B. Applebaum, D. Cash, C. Peikert, and A. Sahai. Fast cryptographic primitives and circularsecure encryption based on hard learning problems. In S. Halevi, editor, Advances in Cryptology – CRYPTO 2009, volume 5677 of Lecture Notes in Computer Science, pages 595–618. Springer, Heidelberg, Aug. 2009.  12. S. Arora and R. Ge. New algorithms for learning in presence of errors. In L. Aceto, M. Henzinger, and J. Sgall, editors, ICALP 2011: 38th International Colloquium on Automata, Languages and Programming, Part I, volume 6755 of Lecture Notes in Computer Science, pages 403–415. Springer, Heidelberg, July 2011. 4110  13. A. Becker, L. Ducas, N. Gama, and T. Laarhoven. New directions in nearest neighbor searching with applications to lattice sieving. In R. Krauthgamer, editor, 27th Annual ACM-SIAM Symposium on Discrete Algorithms, pages 10–24. ACM-SIAM, Jan. 2016.  14. A. Becker, N. Gama, and A. Joux. Speeding-up lattice sieving without increasing the memory, using sub-quadratic nearest neighbor search. Cryptology ePrint Archive, Report 2015/522, 2015. http://eprint.iacr.org/2015/522.  15. D. J. Bernstein, T. Chou, C. Chuengsatiansup, A. H¨ulsing, E. Lambooij, T. Lange, R. Niederhagen, and C. van Vredendaal. How to manipulate curve standards: A white paper for the black hat. In L. Chen and S. Matsuo, editors, Security Standardisation Research (SSR) 2015, volume 9497 of Lecture Notes in Computer Science, pages 109–139. Springer, 2015.  16. E. Biham and A. Shamir. Differential fault analysis of secret key cryptosystems. In B. S. Kaliski Jr., editor, Advances in Cryptology – CRYPTO’97, volume 1294 of Lecture Notes in Computer Science, pages 513–525. Springer, Heidelberg, Aug. 1997.   17. D. Boneh, R. A. DeMillo, and R. J. Lipton. On the importance of checking cryptographic protocols for faults (extended abstract). In W. Fumy, editor, Advances in Cryptology – EUROCRYPT’97, volume 1233 of Lecture Notes in Computer Science, pages 37–51. Springer, Heidelberg, May 1997.  11  18. D. Boneh, C. Gentry, S. Gorbunov, S. Halevi, V. Nikolaenko, G. Segev, V. Vaikuntanathan, and D. Vinayagamurthy. Fully key-homomorphic encryption, arithmetic circuit ABE and compact garbled circuits. In P. Q. Nguyen and E. Oswald, editors, Advances in Cryptology – EUROCRYPT 2014, volume 8441 of Lecture Notes in Computer Science, pages 533–556. Springer, Heidelberg, May 2014.  19. J. W. Bos, C. Costello, L. Ducas, I. Mironov, M. Naehrig, V. Nikolaenko, A. Raghunathan, and D. Stebila. Frodo: Take off the ring! Practical, quantum-secure key exchange from LWE. In E. R. Weippl, S. Katzenbeisser, C. Kruegel, A. C. Myers, and S. Halevi, editors, ACM CCS 2016: 23rd Conference on Computer and Communications Security, pages 1006–1018. ACM Press, Oct. 2016.  20. J. W. Bos, C. Costello, M. Naehrig, and D. Stebila. Post-quantum key exchange for the TLS protocol from the ring learning with errors problem. In 2015 IEEE Symposium on Security and Privacy, pages 553–570. IEEE Computer Society Press, May 2015.   