Задача Вариант Реализовать алгоритм хеширования Провести эксперимент, согласно варианту: придумать слова-пароля, которые будут исходным сообщением х пусть один из них будет состоять из нулей), далее с каждым: найти от него хеш взять от полученного хеша первые бит, обозначив последовательность у0. Далее случайным образом сгенерировать зависит от двух условий, описанных ниже) сообщений, найти от каждого хеш и взять от каждого хеша первые бит, получив последовательность у1, у2,..., уN-1. Нахождение второго прообраза. Необходимо найти такой уi, что уi у0. Посчитать количество шагов, которое потребовалось, чтобы найти уi это сложность второго прообраза. Нахождение коллизий. Необходимо найти в полученной последовательности такие уi и уj, что уi уj. Посчитать количество шагов, которое потребовалось, чтобы найти эту пару это сложность коллизии. Проделать оба эксперимента раз, получить средние значения сложности второго прообраза и сложности коллизии. Повторить данные манипуляции для последовательности хешей размером и бит. Построить графики зависимости среднего значения сложности второго прообраза и коллизии от количества взятых бит. Оценить полученные графики. Тестируемый алгоритм представляет собой алгоритм хэширования битных блоков данных в битный хэш. Описание алгоритма реализует хеш-функцию, построенную на идее функции сжатия. Входами функции сжатия являются блок сообщения длиной бит и выход предыдущего блока сообщения. Выход представляет собой значение всех хеш-блоков до этого момента. Хеш-значением всего сообщения является выход последнего блока. В начале работы алгоритма сообщение дополняется так, чтобы его длина стала кратной разрядам: в конец сообщения добавляют а затем столько нулей, чтобы размер сообщения стал кратен а затем к полученному результату добавляется битовое представление размера исходного сообщения. Затем особым образом инициализируются пять битовых переменных и начинается главный цикл(рис.1). Рисунок Схема одной операции Главный цикл состоит из раундов, каждый из которых включает по операций. Каждая такая операция состоит из подсчета нелинейной функции над тремя переменными из пяти. После выполнения вычислений над результатом выполняются операции сдвига и сложения. После выполнения всех вышеперечисленных операций значения, полученные путем обработки текущего блока данных, складываются со значениями, полученными путем обработки предыдущих блоков данных, и алгоритм переходит к обработке следующего блока данных. Окончательный результат получается конкатенацией значений. Примеры использования алгоритма Пример Исходное сообщение: Хэш: Пример Исходное сообщение: Хэш: Пример Исходное сообщение: Хэш: Исследование Для проведения исследования были взяты следующие слова-пароли: Результаты исследования приведены в таблице Таблица Результаты исследования Количество взятых бит Тест Слово-пароль Прообраз Коллизия Прообраз Коллизия Прообраз Коллизия Прообраз Коллизия Прообраз Коллизия По результатам исследования были построены графики зависимостей второго прообраза и коллизии от количества взятых бит рис.2 и Рисунок График зависимости второго прообраза от количества взятых бит Рисунок График зависимости коллизии от количества взятых бит Вывод В данной лабораторной работе был реализован алгоритм хэширования по которому было проведено исследование по нахождению второго прообраза и коллизии, на основании которого можно сделать вывод, что чем длиннее искомая последовательность, тем сложнее ее найти. является наиболее распространенным из всего семейства и применяется в различных широко распространенных криптографических приложениях и алгоритмах, таких как и т.д. Из-за блочной и итеративной структуры алгоритмов, а также отсутствия специальной обработки в конце хеширования, все хеш-функции семейства уязвимы для атак удлинением сообщения и коллизиям при частичном хешировании сообщения. Эти атаки позволяют подделывать сообщения, подписанные только хэшем путём удлинения сообщения и пересчёту хэша без знания значения ключа. Простейшим исправлением, позволяющим защититься от этих атак, является двойное хеширование. Данный алгоритм был создан в году, а уже в году были опубликованы теоретические атаки на требующие менее операций. В году специалисты из и объявили о практическом взломе алгоритма, опубликовав файла с одинаковой контрольной суммой 