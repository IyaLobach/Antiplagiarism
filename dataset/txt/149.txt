–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã ............................................................................................................................................... 3 –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ...................................................................................................................................... 3 –•–æ–¥ —Ä–∞–±–æ—Ç—ã .................................................................................................................................................. 3 1. –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ ................................................................................................................................ 3 2. –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ ‚Äì —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã ................................................................................. 3 3. –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ ‚Äì –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º ......................................................................................... 4 4. –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ........................................................................................................ 5 –í—ã–≤–æ–¥—ã ........................................................................................................................................................ 6 –õ–∏—Å—Ç–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã ................................................................................................................................. 7    –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã –ò–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ —Å–ª–æ–∂–Ω–æ–π —Å—Ö–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –æ—Ç—Ä–∞–∂–∞—é—â–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π ùêæùëü —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ ùêæùëü –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥—Ä–∞–Ω–∏—Ü.   –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞–µ—Ç—Å—è ùúÜ –∏ ùúá. –ü—É—Å—Ç—å ùúÜ = 1.2 –∏ ùúá = 0.8. –ß–∏—Å–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ ùëÅ = 35000. –ü–µ—Ä–∏–æ–¥ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è ùëá = 5, —à–∞–≥ ‚àÜùë° = 0.01. –î–≤–µ –±—Ä–∏–≥–∞–¥—ã. –°—Ö–µ–º–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞ –Ω–∏–∂–µ:  –†–∏—Å—É–Ω–æ–∫ 1 –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ö–µ–º–∞ –•–æ–¥ —Ä–∞–±–æ—Ç—ã 1. –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞  –ß—Ç–æ–±—ã —Ä–∞—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∏–≥–∞–¥ –¥–æ 4-—Ö (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã). –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∫–∞–∂–¥–∞—è –±—Ä–∏–≥–∞–¥–∞ —á–∏–Ω–∏—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, —Ç.–µ. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ùêæùëü = ùêæ1,1 = 0.4.  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª —ç–ª–µ–º–µ–Ω—Ç 1 –∏–ª–∏ 2 –∏ 3 –∏–ª–∏ 4, —Ç.–µ. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω:  ùëòùëü+=(1‚àí(1‚àí0.4)2)2=0.41 2. –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ ‚Äì —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã  –†–∏—Å—É–Ω–æ–∫ 2 –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥ –û–¥–Ω–∞ –±—Ä–∏–≥–∞–¥–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ö2,1 —Ä–∞–≤–µ–Ω:  –ß—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∞ –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω:    ùêæùëü‚àí=0.47‚àó0.47=0.22 3. –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ ‚Äì –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º  –†–∏—Å—É–Ω–æ–∫ 3 –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã, –∏—Å–∫–ª—é—á–∏–≤ –ø–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∫–∞–∂–¥–∞—è –±—Ä–∏–≥–∞–¥–∞ —á–∏–Ω–∏—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç. –û—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∑–Ω–∞—á–∏—Ç, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–ª–∞ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–ª –∏ —ç–ª–µ–º–µ–Ω—Ç 1, –∏ —ç–ª–µ–º–µ–Ω—Ç 3, —Ç–æ–≥–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω:  ùêæùëü‚àí‚àí=0.4‚àó0.4=0.16 4. –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ  –û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–æ–º–∞–µ—Ç—Å—è, —Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –±—Ä–∏–≥–∞–¥ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ —Ä–µ–º–æ–Ω—Ç—É. –ï—Å–ª–∏ –≤—Å–µ –±—Ä–∏–≥–∞–¥—ã –∑–∞–Ω—è—Ç—ã, —Ç–æ –≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ùë°ùë†ùë°ùëíùëù (—ç–ª–µ–º–µ–Ω—Ç –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –±—Ä–∏–≥–∞–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è).  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã ùëáùë§ –∏ –≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞ ùëáùëü –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–æ—Ä–º—É–ª–∞–º:   –ó–∞—Ç–µ–º –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ùê∏ÃÇ(ùë°) = {0,1}, –≥–¥–µ 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–Ω–∞—á–µ 1. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç—Å—è ùëÅ =35000 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏  –†–∏—Å—É–Ω–æ–∫ 4 –ì—Ä–∞—Ñ–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏  –í—ã–≤–æ–¥—ã –í —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã, –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, –≤ —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–º—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü, –æ —á–µ–º —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ –≤–µ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.   –õ–∏—Å—Ç–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã import java.io.FileWriter; public class Modeling4 {     private class Repair {         private boolean status = true; // 0 - –∑–∞–Ω—è—Ç–∞ 1 - —Å–≤–æ–±–æ–¥–Ω–∞         private double ending; // –≤—Ä–µ–º—è –æ—Ç 0         private byte repairNum = (byte) n;          public void createRepair(boolean s, double e, byte num) {             status = s;             ending = e;             repairNum = num;         }          public void free() {             status = true;             ending = 0;             repairNum = (byte) n;         }          public String toString() {             StringBuilder str = new StringBuilder();             str.append("is free = ").append(status).append(" ").append(ending).append(" ").append(repairNum);             return str.toString();         }     }      private class Element {         private double Tw = 0;         private double Tr = 0;         private int waitNumber = 0;         private boolean isWorking = false;         private byte index = 0;          public String toString() {             StringBuilder str = new StringBuilder();             str.append(index).append(": ");             str.append("Tw = ").append(Tw).append(" Tr = ").append(Tr).append(" ").append(isWorking);             str.append("\n");             return str.toString();         }     }      private int N = 35000;     private int n = 4;     private double l = 1.2;     private double m = 1.0;     private int T = 5;     private double step = 0.01;     private Element[] elements = new Element[n];     private int[] E = new int[(int) ((double) T / step) + 1];      public void testing() {         elements[0].Tw = 0.497;         elements[1].Tw = 0.391;         elements[2].Tw = 0.608;         elements[3].Tw = 0.232;         elements[0].Tr = 0.902;         elements[1].Tr = 0.814;         elements[2].Tr = 0.175;         elements[3].Tr = 0.298;     }      public void bottomLine() throws Exception { // –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã         double K21 = ((2 * m * l) + Math.pow(m, 2)) / (2 * Math.pow(l, 2) + 2 * m * l +                 Math.pow(m, 2));         double K1 = K21 * K21;         double K11 = m / (m + l);         double K2 = Math.pow(K11, 2);         FileWriter file1 = new FileWriter("BottomLine1.txt");         FileWriter file2 = new FileWriter("BottomLine2.txt");         for (int t = 0; t <= T; t += 1) {             StringBuilder str1 = new StringBuilder();             StringBuilder str2 = new StringBuilder();             str1.append(t).append(" ").append(K1).append("\n");             file1.write(str1.toString());             file1.flush();             str2.append(t).append(" ").append(K2).append("\n");             file2.write(str2.toString());             file2.flush();         }     }      public void upperBound() throws Exception { // –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞         double K11 = m / (m + l);         double K = Math.pow((1 - Math.pow(1 - K11, 2)), 2);         FileWriter file = new FileWriter("UpperBound.txt");         for (int t = 0; t <= T; t += 1) {             StringBuilder str = new StringBuilder();             str.append(t).append(" ").append(K).append("\n");             file.write(str.toString());             file.flush();         }     }      public void timeModeling(Element e) {         double Tw = (-1) * ((Math.log(Math.random())) / l);         double Tr = (-1) * ((Math.log(Math.random())) / m);         e.Tw = Tw;         e.Tr = Tr;     }      private void isWorking(Element e, double t, Repair r1, Repair r2) {         int tmp = (int) Math.floor(t / (e.Tw + e.Tr));         if ((t - (tmp * (e.Tw + e.Tr))) <= e.Tw) {             e.isWorking = true;         } else {             e.isWorking = false;             if (r1.repairNum == e.index) {                 if (r1.ending <= (t + step)) {                     e.Tr -= step * e.waitNumber;                     e.waitNumber = 0;                     r1.free();                 }                 return;             }             if (r2.repairNum == e.index) {                 if (r2.ending <= (t + step)) {                     e.Tr -= step * e.waitNumber;                     e.waitNumber = 0;                     r2.free();                 }                 return;             }             if (r1.status || r2.status) { // –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –±—Ä–∏–≥–∞–¥ —Å–≤–æ–±–æ–¥–Ω–∞                 if (r1.status) {                     r1.createRepair(false, (tmp + 1) * (e.Tw + e.Tr), (byte) e.index);                 } else {                     r2.createRepair(false, (tmp + 1) * (e.Tw + e.Tr), (byte) e.index);                 }             } else {                 e.Tr += step;                 e.waitNumber++;             }         }     }      private void simulationOneExperiment() { // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç E         elements = new Element[n];         for (int i = 0; i < n; i++) {             elements[i] = new Element();             elements[i].index = (byte) i;         }         for (int i = 0; i < n; i++) {             timeModeling(elements[i]);         }         // testing();         Repair repair1 = new Repair();         Repair repair2 = new Repair();         int index = 0;         for (double t = 0; t < T; t += step) {             for (int i = 0; i < n; i++) {                 isWorking(elements[i], t, repair1, repair2);             }             if ((elements[0].isWorking || elements[1].isWorking) && (elements[2].isWorking ||                     elements[3].isWorking)) {                 E[index]++;             }             index++; // System.out.println("t = " + t); // System.out.println(elements[0]); // System.out.println(elements[1]); // System.out.println(elements[2]); // System.out.println(elements[3]); // System.out.println(repair1); // System.out.println(repair2); // System.out.println(); // System.out.println();             clear();         }     }      public void modeling() throws Exception {         upperBound();         bottomLine();         for (int i = 0; i < N; i++) {             simulationOneExperiment();         }         FileWriter file = new FileWriter("Kr(t).txt");         int index = 0;         for (double t = 0; t < T; t += step) {             StringBuilder str = new StringBuilder();             str.append(t).append(" ").append(((double) E[index]) / N).append("\n");             file.write(str.toString());             file.flush();             index++;         }     }      public void clear() {         for (int i = 0; i < n; i++)             elements[i].isWorking = false;     }      public void clearFile() {         try {             FileWriter file = new FileWriter("UpperBound.txt");             file.close();             FileWriter file1 = new FileWriter("BottomLine1.txt");             file1.close();             FileWriter file2 = new FileWriter("BottomLine2.txt");             file2.close();             FileWriter file3 = new FileWriter("Kr(t).txt");             file3.close();         } catch (Exception e) {             System.out.println(e.getMessage());             e.printStackTrace();         }     }      public static void main(String[] args) {         Modeling4 m = new Modeling4();         try {             m.modeling();             //m.simulationOneExperiment();         } catch (Exception e) {             System.out.println(e.getMessage());             e.printStackTrace();         }     } }  